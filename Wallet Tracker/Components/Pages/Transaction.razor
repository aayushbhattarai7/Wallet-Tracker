@page "/transaction"
@using Wallet_Tracker.Models
@inject UserService UserService
@inject TransactionService TransactionService

<div class="d-flex flex-wrap justify-content-between align-items-center mb-4 p-4 bg-light rounded shadow-sm">
    <!-- Dropdown for Tag -->
    <div class="mb-3 mb-md-0">
        <label for="tagSelect" class="form-label">Tag</label>
        <select id="tagSelect" class="form-select" @onchange="HandleTagChange">
            <option value="">Select a Tag</option>
            <option value="Salary">Salary</option>
            <option value="Groceries">Groceries</option>
            <option value="Entertainment">Entertainment</option>
            <option value="Bills">Bills</option>
            <option value="Shopping">Shopping</option>
            <option value="Other">Other</option>
        </select>
    </div>

    <!-- Dropdown for Transaction Type -->
    <div class="mb-3 mb-md-0">
        <label for="typeSelect" class="form-label">Transaction Type</label>
        <select id="typeSelect" class="form-select" @onchange="HandleTypeChange">
            <option value="">Select Type</option>
            <option value="Debit">Debit</option>
            <option value="Credit">Credit</option>
            <option value="TakenDebt">TakenDebt</option>
            <option value="ClearedDebt">ClearedDebt</option>
        </select>
    </div>

    <!-- Date Range Inputs -->
    <div class="mb-3 mb-md-0">
        <label class="form-label">Date Range</label>
        <div class="d-flex gap-2">
            <div>
                <label for="fromDate" class="form-label visually-hidden">From:</label>
                <input type="date" id="fromDate" class="form-control" @onchange="HandleFromDateChange" />
            </div>
            <div>
                <label for="toDate" class="form-label visually-hidden">To:</label>
                <input type="date" id="toDate" class="form-control" @onchange="HandleToDateChange" />
            </div>
        </div>
    </div>

    <!-- Transaction History Section -->
    <div class="mb-3 mb-md-0">
        <h5 class="fw-bold">Transaction History</h5>
        <button class="btn btn-outline-secondary d-flex align-items-center gap-2" @onclick="SortByAmount">
            <span>Sort by</span>
            @if (isSortAmountAscending)
            {
                <i class="bi bi-arrow-down-circle-fill"></i>
            }
            else
            {
                <i class="bi bi-arrow-up-circle-fill"></i>
            }
        </button>
    </div>

    <!-- Search Input -->
    <div class="col-md-6 mb-3 mb-md-0">
        <label for="searchInput" class="form-label">Search Transactions</label>
        <input type="text" id="searchInput" class="form-control shadow-sm" placeholder="Search..." @bind="searchParams" @oninput="ApplyFilters" @onkeypress="HandleKeyPress" />
    </div>
</div>

<p class="fw-bold">Total Transactions: @filteredTransactions.Count</p>


@if (Transactions?.Count > 0)
{
    <table class="table table-striped table-hover align-middle shadow-sm">
        <thead class="thead-light">
            <tr>
                <th>Id</th>
                <th>
                    <button class="btn btn-link p-0 text-decoration-none text-dark fw-bold" @onclick="SortDate">
                        Date
                        @if (isSortDateAscending)
                        {
                            <span>&uarr;</span>
                        }
                        else
                        {
                            <span>&darr;</span>
                        }
                    </button>
                </th>
                <th>Type</th>
                <th>
                    <button class="btn btn-link p-0 text-decoration-none text-dark fw-bold" @onclick="SortByAmount">
                        Amount
                        @if (isSortAmountAscending)
                        {
                            <span>&uarr;</span>
                        }
                        else
                        {
                            <span>&darr;</span>
                        }
                    </button>
                </th>
                <th>Tag</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Amount.ToString("C")</td>
                    <td>@transaction.Tag</td>
                    <td>@transaction.Description</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No transactions found.</p>
}

<button class="btn btn-outline-success mt-3" @onclick="ClearTransactionHistory">Clear Transaction History</button>

@code {
    private List<Wallet_Tracker.Models.Transaction> Transactions = new();
    private List<Wallet_Tracker.Models.Transaction> filteredTransactions = new();
    private string searchParams = string.Empty;
    private bool isSortDateAscending = true;
    private bool isSortAmountAscending = true;
    private string Tag = string.Empty;
    private string Type = string.Empty;
    private DateTime? FromDate = null;
    private DateTime? ToDate = null;

    protected override void OnInitialized()
    {
        var username = UserService.loggedInUserName;

        if (!string.IsNullOrEmpty(username))
        {
            Transactions = TransactionService.GetUserTransactions(username);
            filteredTransactions = new List<Wallet_Tracker.Models.Transaction>(Transactions);
        }
    }

    private void SortDate()
    {
        if (isSortDateAscending)
        {
            filteredTransactions = filteredTransactions.OrderByDescending(x => x.Date).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderBy(x => x.Date).ToList();
        }

        isSortDateAscending = !isSortDateAscending;
    }

    private void SortByAmount()
    {
        if (isSortAmountAscending)
        {
            filteredTransactions = filteredTransactions.OrderBy(x => x.Amount).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderByDescending(x => x.Amount).ToList();
        }

        isSortAmountAscending = !isSortAmountAscending;
    }

    private void ApplyFilters()
    {
        var filteredList = Transactions.AsEnumerable();

        // Apply search filter if any
        if (!string.IsNullOrWhiteSpace(searchParams))
        {
            filteredList = filteredList.Where(x => x.Type.Contains(searchParams, StringComparison.OrdinalIgnoreCase) || x.Description.Contains(searchParams, StringComparison.OrdinalIgnoreCase));
        }

        // Apply tag filter if any
        if (!string.IsNullOrWhiteSpace(Tag))
        {
            filteredList = filteredList.Where(x => !string.IsNullOrEmpty(x.Tag) && x.Tag.Contains(Tag, StringComparison.OrdinalIgnoreCase));
        }

        // Apply type filter if any
        if (!string.IsNullOrWhiteSpace(Type))
        {
            filteredList = filteredList.Where(x => x.Type.Contains(Type, StringComparison.OrdinalIgnoreCase));
        }

        // Apply date range filter if any
        if (FromDate.HasValue)
        {
            filteredList = filteredList.Where(x => x.Date >= FromDate.Value);
        }

        if (ToDate.HasValue)
        {
            filteredList = filteredList.Where(x => x.Date <= ToDate.Value);
        }

        filteredTransactions = filteredList.ToList();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    private void HandleTagChange(ChangeEventArgs e)
    {
        Tag = e.Value.ToString();
        ApplyFilters();
    }

    private void HandleTypeChange(ChangeEventArgs e)
    {
        Type = e.Value.ToString();
        ApplyFilters();
    }

    private void HandleFromDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime fromDate))
        {
            FromDate = fromDate;
        }
        ApplyFilters();
    }

    private void HandleToDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime toDate))
        {
            ToDate = toDate;
        }
        ApplyFilters();
    }

    private void ClearTransactionHistory()
    {
        var username = UserService.loggedInUserName;
        if (!string.IsNullOrEmpty(username))
        {
            TransactionService.ClearTransaction(username);
            Transactions.Clear();
            filteredTransactions.Clear();
        }
    }
    private async Task ReloadData()
    {
         TransactionService.GetUserTransactions(UserService.loggedInUserName);
        StateHasChanged(); // Trigger a UI refresh
    }
}
